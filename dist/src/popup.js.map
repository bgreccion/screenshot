{"version":3,"file":"src/popup.js","mappings":"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","sources":["webpack://smartmerge-screenshot/./src/popup/popup.js"],"sourcesContent":["// Store screenshots in memory (they will be cleared when popup is closed)\r\nlet screenshots = []\r\nlet selectedScreenshots = new Set()\r\n\r\n// Initialize UI\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  // Attach click handlers to capture buttons\r\n  document.getElementById('fullPage').addEventListener('click', captureFullPage)\r\n  document.getElementById('viewport').addEventListener('click', captureViewport)\r\n  document.getElementById('element').addEventListener('click', captureElement)\r\n  document.getElementById('area').addEventListener('click', captureArea)\r\n  document.getElementById('mergeSelected').addEventListener('click', mergeSelected)\r\n\r\n  // Initialize screenshots list if any exist in storage\r\n  updateScreenshotsList()\r\n})\r\n\r\n// Capture functions\r\nfunction captureFullPage() {\r\n  chrome.tabs.query({ active: true, currentWindow: true }, ([tab]) => {\r\n    chrome.tabs.sendMessage(tab.id, { action: 'CAPTURE_FULL_PAGE' }, handleScreenshot)\r\n  })\r\n}\r\n\r\nfunction captureViewport() {\r\n  chrome.tabs.query({ active: true, currentWindow: true }, ([tab]) => {\r\n    chrome.tabs.sendMessage(tab.id, { action: 'CAPTURE_VIEWPORT' }, handleScreenshot)\r\n  })\r\n}\r\n\r\nfunction captureElement() {\r\n  chrome.tabs.query({ active: true, currentWindow: true }, ([tab]) => {\r\n    chrome.tabs.sendMessage(tab.id, { action: 'START_ELEMENT_SELECT' }, handleScreenshot)\r\n  })\r\n}\r\n\r\nfunction captureArea() {\r\n  chrome.tabs.query({ active: true, currentWindow: true }, ([tab]) => {\r\n    chrome.tabs.sendMessage(tab.id, { action: 'START_AREA_SELECT' }, handleScreenshot)\r\n  })\r\n}\r\n\r\n// Handle new screenshot\r\nfunction handleScreenshot(dataUrl) {\r\n  if (!dataUrl) return\r\n\r\n  const screenshot = {\r\n    id: Date.now(),\r\n    dataUrl: dataUrl,\r\n    timestamp: new Date().toISOString()\r\n  }\r\n\r\n  screenshots.push(screenshot)\r\n  updateScreenshotsList()\r\n}\r\n\r\n// Update screenshots list in UI\r\nfunction updateScreenshotsList() {\r\n  const container = document.getElementById('screenshotsList')\r\n  container.innerHTML = ''\r\n\r\n  screenshots.forEach(screenshot => {\r\n    const item = document.createElement('div')\r\n    item.className = 'screenshot-item'\r\n    item.innerHTML = `\r\n      <input type=\"checkbox\" data-id=\"${screenshot.id}\" ${selectedScreenshots.has(screenshot.id) ? 'checked' : ''}>\r\n      <img src=\"${screenshot.dataUrl}\" alt=\"Screenshot\">\r\n      <button class=\"download-btn\" data-id=\"${screenshot.id}\">ðŸ’¾</button>\r\n    `\r\n\r\n    // Add event listeners\r\n    const checkbox = item.querySelector('input[type=\"checkbox\"]')\r\n    checkbox.addEventListener('change', () => {\r\n      if (checkbox.checked) {\r\n        selectedScreenshots.add(screenshot.id)\r\n      } else {\r\n        selectedScreenshots.delete(screenshot.id)\r\n      }\r\n      updateMergeButton()\r\n    })\r\n\r\n    const downloadBtn = item.querySelector('.download-btn')\r\n    downloadBtn.addEventListener('click', () => {\r\n      saveScreenshot(screenshot.dataUrl)\r\n    })\r\n\r\n    container.appendChild(item)\r\n  })\r\n\r\n  updateMergeButton()\r\n}\r\n\r\n// Update merge button state\r\nfunction updateMergeButton() {\r\n  const mergeBtn = document.getElementById('mergeSelected')\r\n  mergeBtn.disabled = selectedScreenshots.size < 2\r\n}\r\n\r\n// Merge selected screenshots\r\nfunction mergeSelected() {\r\n  const selectedImages = screenshots.filter(s => selectedScreenshots.has(s.id))\r\n  if (selectedImages.length < 2) return\r\n\r\n  // Create canvas for merging\r\n  const canvas = document.createElement('canvas')\r\n  const ctx = canvas.getContext('2d')\r\n\r\n  // Load all images first\r\n  Promise.all(selectedImages.map(screenshot => {\r\n    return new Promise((resolve) => {\r\n      const img = new Image()\r\n      img.onload = () => resolve(img)\r\n      img.src = screenshot.dataUrl\r\n    })\r\n  })).then(images => {\r\n    // Calculate dimensions\r\n    const maxWidth = Math.max(...images.map(img => img.width))\r\n    const totalHeight = images.reduce((sum, img) => sum + img.height, 0)\r\n\r\n    // Set canvas size\r\n    canvas.width = maxWidth\r\n    canvas.height = totalHeight\r\n\r\n    // Fill with white background\r\n    ctx.fillStyle = '#FFFFFF'\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n    // Draw images\r\n    let y = 0\r\n    images.forEach(img => {\r\n      ctx.drawImage(img, 0, y)\r\n      y += img.height\r\n    })\r\n\r\n    // Save merged image\r\n    saveScreenshot(canvas.toDataURL())\r\n  })\r\n}\r\n\r\n// Save screenshot using background script\r\nfunction saveScreenshot(dataUrl) {\r\n  chrome.runtime.sendMessage({\r\n    action: 'SAVE_SCREENSHOT',\r\n    dataUrl: dataUrl\r\n  })\r\n}\r\n"],"names":["screenshots","selectedScreenshots","Set","document","addEventListener","getElementById","captureFullPage","captureViewport","captureElement","captureArea","mergeSelected","updateScreenshotsList","chrome","tabs","query","active","currentWindow","_ref","_ref2","_slicedToArray","tab","sendMessage","id","action","handleScreenshot","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","dataUrl","screenshot","Date","now","timestamp","toISOString","push","container","innerHTML","forEach","item","createElement","className","concat","has","checkbox","querySelector","checked","add","updateMergeButton","downloadBtn","saveScreenshot","appendChild","mergeBtn","disabled","size","selectedImages","filter","s","length","canvas","ctx","getContext","Promise","all","map","resolve","img","Image","onload","src","then","images","maxWidth","Math","max","apply","_toConsumableArray","width","totalHeight","reduce","sum","height","fillStyle","fillRect","y","drawImage","toDataURL","runtime"],"sourceRoot":""}